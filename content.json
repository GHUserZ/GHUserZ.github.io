{"meta":{"title":"Panda","subtitle":"Panda带你走进前端的世界","description":null,"author":"zxl","url":"http://yoursite.com"},"pages":[{"title":"关于我","date":"2018-08-02T03:31:28.000Z","updated":"2018-08-02T03:35:40.201Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"PM2实用入门指南","slug":"PM2实用入门指南","date":"2018-08-07T05:27:47.038Z","updated":"2018-08-07T05:32:19.561Z","comments":true,"path":"2018/08/07/PM2实用入门指南/","link":"","permalink":"http://yoursite.com/2018/08/07/PM2实用入门指南/","excerpt":"","text":"PM2实用入门指南 简介PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 下面就对PM2进行入门性的介绍，基本涵盖了PM2的常用的功能和配置。 安装全局安装，简直不能更简单。 1npm install -g pm2 目录介绍pm2安装好后，会自动创建下面目录。看文件名基本就知道干嘛的了，就不翻译了。123456789$HOME/.pm2 will contain all PM2 related files$HOME/.pm2/logs will contain all applications logs$HOME/.pm2/pids will contain all applications pids$HOME/.pm2/pm2.log PM2 logs$HOME/.pm2/pm2.pid PM2 pid$HOME/.pm2/rpc.sock Socket file for remote commands$HOME/.pm2/pub.sock Socket file for publishable events$HOME/.pm2/conf.js PM2 Configuration 入门教程挑我们最爱的express应用来举例。一般我们都是通过npm start启动应用，其实就是调用node ./bin/www。那么，换成pm2就是 注意，这里用了–watch参数，意味着当你的express应用代码发生变化时，pm2会帮你重启服务，多贴心。1pm2 start ./bin/www --watch 入门太简单了，没什么好讲的。直接上官方文档：http://pm2.keymetrics.io/docs/usage/quick-start 常用命令启动参数说明： –watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。-i –instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。–ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如–ignore-watch=”test node_modules “some scripts””-n –name：应用的名称。查看应用信息的时候可以用到。-o –output ：标准输出日志文件的路径。-e –error ：错误输出日志文件的路径。–interpreter ：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。完整命令行参数列表：地址1pm2 start app.js --watch -i 2 重启1pm2 restart app.js 停止停止特定的应用。可以先通过pm2 list获取应用的名字（–name指定的）或者进程id。1pm2 stop app_name|app_id 如果要停止所有应用，可以1pm2 stop all 删除类似pm2 stop，如下12pm2 stop app_name|app_idpm2 stop all 查看进程状态1pm2 list 查看某个进程的信息123456789101112131415161718192021[root@iZ94wb7tioqZ pids]# pm2 describe 0Describing process with id 0 - name oc-server┌───────────────────┬──────────────────────────────────────────────────────────────┐│ status │ online ││ name │ oc-server ││ id │ 0 ││ path │ /data/file/qiquan/over_the_counter/server/bin/www ││ args │ ││ exec cwd │ /data/file/qiquan/over_the_counter/server ││ error log path │ /data/file/qiquan/over_the_counter/server/logs/app-err-0.log ││ out log path │ /data/file/qiquan/over_the_counter/server/logs/app-out-0.log ││ pid path │ /root/.pm2/pids/oc-server-0.pid ││ mode │ fork_mode ││ node v8 arguments │ ││ watch &amp; reload │ ││ interpreter │ node ││ restarts │ 293 ││ unstable restarts │ 0 ││ uptime │ 87m ││ created at │ 2016-08-26T08:13:43.705Z │└───────────────────┴──────────────────────────────────────────────────────────────┘ 配置文件简单说明配置文件里的设置项，跟命令行参数基本是一一对应的。可以选择yaml或者json文件，就看个人洗好了。json格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）例子 举个简单例子，完整配置说明请参考官方文档。12345678910111213141516171819202122&#123; &quot;name&quot; : &quot;fis-receiver&quot;, // 应用名称 &quot;script&quot; : &quot;./bin/www&quot;, // 实际启动脚本 &quot;cwd&quot; : &quot;./&quot;, // 当前工作路径 &quot;watch&quot;: [ // 监控变化的目录，一旦变化，自动重启 &quot;bin&quot;, &quot;routers&quot; ], &quot;ignore_watch&quot; : [ // 从监控目录中排除 &quot;node_modules&quot;, &quot;logs&quot;, &quot;public&quot; ], &quot;watch_options&quot;: &#123; &quot;followSymlinks&quot;: false &#125;, &quot;error_file&quot; : &quot;./logs/app-err.log&quot;, // 错误日志路径 &quot;out_file&quot; : &quot;./logs/app-out.log&quot;, // 普通日志路径 &quot;env&quot;: &#123; &quot;NODE_ENV&quot;: &quot;production&quot; // 环境参数，当前指定为生产环境 &#125;&#125; 自动重启前面已经提到了，这里贴命令行，更多点击这里。1pm2 start app.js --watch 这里是监控整个项目的文件，如果只想监听指定文件和目录，建议通过配置文件的watch、ignore_watch字段来设置。 环境切换在实际项目开发中，我们的应用经常需要在多个环境下部署，比如开发环境、测试环境、生产环境等。在不同环境下，有时候配置项会有差异，比如链接的数据库地址不同等。 对于这种场景，pm2也是可以很好支持的。首先通过在配置文件中通过env_xx来声明不同环境的配置，然后在启动应用时，通过– 环境配置声明首先，在配置文件中，通过env选项声明多个环境配置。简单说明下：env为默认的环境配置（生产环境），env_dev、env_test则分别是开发、测试环境。可以看到，不同环境下的NODE_ENV、REMOTE_ADDR字段的值是不同的。在应用中，可以通过process.env.REMOTE_ADDR等来读取配置中生命的变量。123456789101112&quot;env&quot;: &#123; &quot;NODE_ENV&quot;: &quot;production&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://www.example.com/&quot;&#125;,&quot;env_dev&quot;: &#123; &quot;NODE_ENV&quot;: &quot;development&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://wdev.example.com/&quot;&#125;,&quot;env_test&quot;: &#123; &quot;NODE_ENV&quot;: &quot;test&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://wtest.example.com/&quot;&#125; 启动指明环境假设通过下面启动脚本（开发环境），那么，此时process.env.REMOTE_ADDR的值就是相应的 http://wdev.example.com/ ，可以自己试验下。1pm2 start app.js --env dev 负载均衡命令如下，表示开启三个进程。如果-i 0，则会根据机器当前核数自动开启尽可能多的进程。 12pm2 start app.js -i 3 # 开启三个进程pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程 日志查看除了可以打开日志文件查看日志外，还可以通过pm2 logs来查看实时日志。这点对于线上问题排查非常重要。 比如某个node服务突然异常重启了，那么可以通过pm2提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。1pm2 logs 指令tab补全运行pm2 –help，可以看到pm2支持的子命令还是蛮多的，这个时候，自动完成的功能就很重要了。 运行如下命令。恭喜，已经能够通过tab自动补全了。细节可参考这里。12pm2 completion installsource ~/.bash_profile 开机自动启动可以通过pm2 startup来实现开机自启动。细节可参考。大致流程如下 通过pm2 save保存当前进程状态。通过pm2 startup [platform]生成开机自启动的命令。（记得查看控制台输出）将步骤2生成的命令，粘贴到控制台进行，搞定。 传入node args直接上例子，分别是通过命令行和配置文件。命令行：12345678pm2 start app.js --node-args=&quot;--harmony&quot;配置文件：&#123; &quot;name&quot; : &quot;oc-server&quot;, &quot;script&quot; : &quot;app.js&quot;, &quot;node_args&quot; : &quot;--harmony&quot;&#125; 实例说明假设是在centos下，那么运行如下命令，搞定。强烈建议运行完成之后，重启机器，看是否设置成功。12345678910[root@iZ94wb7tioqZ option_analysis]# pm2 save[root@iZ94wb7tioqZ option_analysis]# pm2 startup centos[PM2] Generating system init script in /etc/init.d/pm2-init.sh[PM2] Making script booting at startup...[PM2] /var/lock/subsys/pm2-init.sh lockfile has been added[PM2] -centos- Using the command: su -c &quot;chmod +x /etc/init.d/pm2-init.sh; chkconfig --add pm2-init.sh&quot;[PM2] Done.[root@iZ94wb7tioqZ option_analysis]# pm2 save[PM2] Dumping processes 远程部署可参考官方文档，配置也不复杂，用到的时候再来填写这里的坑。TODO 官方文档：http://pm2.keymetrics.io/docs/usage/deployment/#getting-started 监控(monitor)运行如下命令，查看当前通过pm2运行的进程的状态。1pm2 monit 看到类似输出12345678910111213141516171819[root@oneday-dev0 server]# pm2 monit⌬ PM2 monitoring (To go further check out https://app.keymetrics.io) [ ] 0 %⌬ PM2 monitoring (To go further check o[||||||||||||||| ] 196.285 MB ● fis-receiver [ ] 0 %[1] [fork_mode] [||||| ] 65.773 MB ● www [ ] 0 %[2] [fork_mode] [||||| ] 74.426 MB ● oc-server [ ] 0 %[3] [fork_mode] [|||| ] 57.801 MB ● pm2-http-interface [ ] stopped[4] [fork_mode] [ ] 0 B ● start-production[5] [fork_mode] 内存使用超过上限自动重启如果想要你的应用，在超过使用内存上限后自动重启，那么可以加上–max-memory-restart参数。（有对应的配置项）1pm2 start big-array.js --max-memory-restart 20M 更新pm2官方文档：http://pm2.keymetrics.io/docs/usage/update-pm2/#updating-pm2123$ pm2 save # 记得保存进程状态$ npm install pm2 -g$ pm2 update pm2 + nginx无非就是在nginx上做个反向代理配置，直接贴配置。 12345678910111213141516171819202122upstream my_nodejs_upstream &#123; server 127.0.0.1:3001;&#125;server &#123; listen 80; server_name my_nodejs_server; root /home/www/project_root; location / &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_max_temp_file_size 0; proxy_pass http://my_nodejs_upstream/; proxy_redirect off; proxy_read_timeout 240s; &#125;&#125; 官方文档：http://pm2.keymetrics.io/docs/tutorials/pm2-nginx-production-setup 在线监控系统收费服务，使用超级简单，可以方便的对进程的服务情况进行监控。可以试用下，地址:https://app.keymetrics.io/。 pm2编程接口如果想把pm2的进程监控，跟其他自动化流程整合起来，pm2的编程接口就很有用了。细节可参考官方文档：http://pm2.keymetrics.io/docs/usage/pm2-api/ 模块扩展系统pm2支持第三方扩展，比如常用的log rotate等。可参考官方文档。 写在后面pm2的文档已经写的很好了，学习成本很低，即使是没用过pm2的小伙伴，基本上照着getting started的例子就可以把项目给跑起来，所以文中不少地方都是建议直接参看官方文档。 github博客：https://github.com/chyingp/blog新浪微博：http://weibo.com/chyingp站酷主页：http://www.zcool.com.cn/u/346408/","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"hexo添加评论功能","slug":"hexo添加评论功能","date":"2018-08-02T01:57:13.961Z","updated":"2018-08-02T01:57:48.100Z","comments":true,"path":"2018/08/02/hexo添加评论功能/","link":"","permalink":"http://yoursite.com/2018/08/02/hexo添加评论功能/","excerpt":"","text":"hexo添加评论功能 目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。可用的评论系统常用的有以下几个：HyperComments：https://www.hypercomments.com （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）来必力：https://livere.com （来自韩国，使用邮箱注册。）畅言： http://changyan.kuaizhan.com （安装需要备案号。不太好用。）Gitment： https://github.com/imsun/gitment（有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）Valine: https://github.com/xCss/Valine(基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）综上，最终采用了来必力。 注册帐号 打开来必力官网： https://livere.com 友情提示：注册是需要翻墙 安装点击上方的安装，选择免费的city版本。 并点击现在安装，出现如下界面。 复制其中的uid字段。打开主题目录下的 blog/themes/next/_config.yml 配置文件，定位到 livere_uid 字段，粘贴上刚刚复制的UID。至此，大功告成。效果展示测试评论如图所示：","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-31T09:02:20.210Z","updated":"2018-08-02T05:48:03.304Z","comments":true,"path":"2018/07/31/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]}]}