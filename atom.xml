<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Panda</title>
  
  <subtitle>Panda带你走进前端的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-07T06:02:34.099Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zxl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PM2部署nodejs项目</title>
    <link href="http://yoursite.com/2018/08/07/PM2%E9%83%A8%E7%BD%B2nodejs%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/08/07/PM2部署nodejs项目/</id>
    <published>2018-08-07T05:51:16.571Z</published>
    <updated>2018-08-07T06:02:34.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PM2部署nodejs项目"><a href="#PM2部署nodejs项目" class="headerlink" title="PM2部署nodejs项目"></a>PM2部署nodejs项目</h1><p>如果直接通过node app来启动，如果报错了可能直接停在整个运行，supervisor感觉只是拿来用作开发环境的。再网上找到pm2.目前似乎最常见的线上部署nodejs项目的有forever,pm2这两种。</p><h2 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合:"></a>使用场合:</h2><ul><li>supervisor是开发环境用。</li><li>forever管理多个站点，每个站点访问量不大，不需要监控。</li><li>pm2 网站访问量比较大,需要完整的监控界面。<h3 id="PM2的主要特性"><a href="#PM2的主要特性" class="headerlink" title="PM2的主要特性:"></a>PM2的主要特性:</h3></li><li>内建负载均衡（使用Node cluster 集群模块）</li><li>后台运行</li><li>0秒停机重载，我理解大概意思是维护升级的时候不需要停机.</li><li>具有Ubuntu和CentOS 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 HTTP API</li><li>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g pm2 命令行全局安装pm2</span><br><span class="line">$ pm2 start app.js 启动app项目</span><br><span class="line">$ pm2 list 列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常。</span><br><span class="line">$ pm2 monit 监视每个node进程的CPU和内存的使用情况</span><br><span class="line">$ pm2 logs 显示所有进程日志</span><br><span class="line">$ pm2 stop all 停止所有进程</span><br><span class="line">$ pm2 restart all 重启所有进程</span><br><span class="line">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">$ pm2 stop 0 停止指定的进程</span><br><span class="line">$ pm2 restart 0 重启指定的进程</span><br><span class="line">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class="line">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class="line">$ pm2 delete 0 杀死指定的进程</span><br><span class="line">$ pm2 delete all 杀死全部进程</span><br></pre></td></tr></table></figure><h3 id="运行进程的不同方式："><a href="#运行进程的不同方式：" class="headerlink" title="运行进程的不同方式："></a>运行进程的不同方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class="line">$ pm2 start app.js -i 3 启动3个进程</span><br><span class="line">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class="line">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class="line">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class="line">$ pm2 stop serverone 停止 serverone 进程</span><br><span class="line">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class="line">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class="line">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure><h2 id="配置pm2启动文件"><a href="#配置pm2启动文件" class="headerlink" title="配置pm2启动文件"></a>配置pm2启动文件</h2><p>在项目根目录添加一个processes.json：<br>内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;mywork&quot;,</span><br><span class="line">      &quot;cwd&quot;: &quot;/srv/node-app/current&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;bin/www&quot;,</span><br><span class="line">      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;,</span><br><span class="line">      &quot;error_file&quot;: &quot;/var/log/node-app/node-app.stderr.log&quot;,</span><br><span class="line">      &quot;out_file&quot;: &quot;log/node-app.stdout.log&quot;,</span><br><span class="line">      &quot;pid_file&quot;: &quot;pids/node-geo-api.pid&quot;,</span><br><span class="line">      &quot;instances&quot;: 6,</span><br><span class="line">      &quot;min_uptime&quot;: &quot;200s&quot;,</span><br><span class="line">      &quot;max_restarts&quot;: 10,</span><br><span class="line">      &quot;max_memory_restart&quot;: &quot;1M&quot;,</span><br><span class="line">      &quot;cron_restart&quot;: &quot;1 0 * * *&quot;,</span><br><span class="line">      &quot;watch&quot;: false,</span><br><span class="line">      &quot;merge_logs&quot;: true,</span><br><span class="line">      &quot;exec_interpreter&quot;: &quot;node&quot;,</span><br><span class="line">      &quot;exec_mode&quot;: &quot;fork&quot;,</span><br><span class="line">      &quot;autorestart&quot;: false,</span><br><span class="line">      &quot;vizion&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><ul><li>apps:json结构，apps是一个数组，每一个数组成员就是对应一个pm2中运行的应用</li><li>name:应用程序名称</li><li>cwd:应用程序所在的目录</li><li>script:应用程序的脚本路径</li><li>log_date_format:</li><li>error_file:自定义应用程序的错误日志文件</li><li>out_file:自定义应用程序日志文件</li><li>pid_file:自定义应用程序的pid文件</li><li>instances:</li><li>min_uptime:最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触 - 发重启max_restarts设置数量</li><li>max_restarts:设置应用程序异常退出重启的次数，默认15次（从0开始计数）</li><li>cron_restart:定时启动，解决重启能解决的问题</li><li>watch:是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以 - 设置你要监控的文件。</li><li>merge_logs:</li><li>exec_interpreter:应用程序的脚本类型，这里使用的shell，默认是nodejs</li><li>exec_mode:应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</li><li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li><li>vizion:启用/禁用vizion特性(版本控制)<br>可以通过pm2 start processes.json来启动。<br>也可以把命令写在package.json里。如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node ./bin/www&quot;,</span><br><span class="line">    &quot;pm2&quot;: &quot;pm2 start processes.json&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PM2部署nodejs项目&quot;&gt;&lt;a href=&quot;#PM2部署nodejs项目&quot; class=&quot;headerlink&quot; title=&quot;PM2部署nodejs项目&quot;&gt;&lt;/a&gt;PM2部署nodejs项目&lt;/h1&gt;&lt;p&gt;如果直接通过node app来启动，如果报错了可能直
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PM2入门指南</title>
    <link href="http://yoursite.com/2018/08/07/PM2%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/08/07/PM2入门指南/</id>
    <published>2018-08-07T05:27:47.038Z</published>
    <updated>2018-08-07T05:40:08.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PM2实用入门指南"><a href="#PM2实用入门指南" class="headerlink" title="PM2实用入门指南"></a>PM2实用入门指南</h1><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><p>下面就对PM2进行入门性的介绍，基本涵盖了PM2的常用的功能和配置。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装，简直不能更简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p>pm2安装好后，会自动创建下面目录。看文件名基本就知道干嘛的了，就不翻译了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$HOME/.pm2 will contain all PM2 related files</span><br><span class="line">$HOME/.pm2/logs will contain all applications logs</span><br><span class="line">$HOME/.pm2/pids will contain all applications pids</span><br><span class="line">$HOME/.pm2/pm2.log PM2 logs</span><br><span class="line">$HOME/.pm2/pm2.pid PM2 pid</span><br><span class="line">$HOME/.pm2/rpc.sock Socket file for remote commands</span><br><span class="line">$HOME/.pm2/pub.sock Socket file for publishable events</span><br><span class="line">$HOME/.pm2/conf.js PM2 Configuration</span><br></pre></td></tr></table></figure></p><h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><p>挑我们最爱的express应用来举例。一般我们都是通过npm start启动应用，其实就是调用node ./bin/www。那么，换成pm2就是</p><p>注意，这里用了–watch参数，意味着当你的express应用代码发生变化时，pm2会帮你重启服务，多贴心。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./bin/www --watch</span><br></pre></td></tr></table></figure></p><p>入门太简单了，没什么好讲的。直接上官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/quick-start</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>参数说明：</p><p>–watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。<br>-i –instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。<br>–ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如–ignore-watch=”test node_modules “some scripts””<br>-n –name：应用的名称。查看应用信息的时候可以用到。<br>-o –output <path></path>：标准输出日志文件的路径。<br>-e –error <path></path>：错误输出日志文件的路径。<br>–interpreter <interpreter>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。<br>完整命令行参数列表：地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --watch -i 2</span><br></pre></td></tr></table></figure></interpreter></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app.js</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>停止特定的应用。可以先通过pm2 list获取应用的名字（–name指定的）或者进程id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop app_name|app_id</span><br></pre></td></tr></table></figure></p><p>如果要停止所有应用，可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>类似pm2 stop，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop app_name|app_id</span><br><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure></p><h3 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><h3 id="查看某个进程的信息"><a href="#查看某个进程的信息" class="headerlink" title="查看某个进程的信息"></a>查看某个进程的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ94wb7tioqZ pids]# pm2 describe 0</span><br><span class="line">Describing process with id 0 - name oc-server</span><br><span class="line">┌───────────────────┬──────────────────────────────────────────────────────────────┐</span><br><span class="line">│ status            │ online                                                       │</span><br><span class="line">│ name              │ oc-server                                                    │</span><br><span class="line">│ id                │ 0                                                            │</span><br><span class="line">│ path              │ /data/file/qiquan/over_the_counter/server/bin/www            │</span><br><span class="line">│ args              │                                                              │</span><br><span class="line">│ exec cwd          │ /data/file/qiquan/over_the_counter/server                    │</span><br><span class="line">│ error log path    │ /data/file/qiquan/over_the_counter/server/logs/app-err-0.log │</span><br><span class="line">│ out log path      │ /data/file/qiquan/over_the_counter/server/logs/app-out-0.log │</span><br><span class="line">│ pid path          │ /root/.pm2/pids/oc-server-0.pid                              │</span><br><span class="line">│ mode              │ fork_mode                                                    │</span><br><span class="line">│ node v8 arguments │                                                              │</span><br><span class="line">│ watch &amp; reload    │                                                             │</span><br><span class="line">│ interpreter       │ node                                                         │</span><br><span class="line">│ restarts          │ 293                                                          │</span><br><span class="line">│ unstable restarts │ 0                                                            │</span><br><span class="line">│ uptime            │ 87m                                                          │</span><br><span class="line">│ created at        │ 2016-08-26T08:13:43.705Z                                     │</span><br><span class="line">└───────────────────┴──────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h3><p>配置文件里的设置项，跟命令行参数基本是一一对应的。<br>可以选择yaml或者json文件，就看个人洗好了。<br>json格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。<br>如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）<br>例子</p><p>举个简单例子，完整配置说明请参考官方文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;        : &quot;fis-receiver&quot;,  // 应用名称</span><br><span class="line">  &quot;script&quot;      : &quot;./bin/www&quot;,  // 实际启动脚本</span><br><span class="line">  &quot;cwd&quot;         : &quot;./&quot;,  // 当前工作路径</span><br><span class="line">  &quot;watch&quot;: [  // 监控变化的目录，一旦变化，自动重启</span><br><span class="line">    &quot;bin&quot;,</span><br><span class="line">    &quot;routers&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;ignore_watch&quot; : [  // 从监控目录中排除</span><br><span class="line">    &quot;node_modules&quot;, </span><br><span class="line">    &quot;logs&quot;,</span><br><span class="line">    &quot;public&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;watch_options&quot;: &#123;</span><br><span class="line">    &quot;followSymlinks&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;error_file&quot; : &quot;./logs/app-err.log&quot;,  // 错误日志路径</span><br><span class="line">  &quot;out_file&quot;   : &quot;./logs/app-out.log&quot;,  // 普通日志路径</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">      &quot;NODE_ENV&quot;: &quot;production&quot;  // 环境参数，当前指定为生产环境</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>前面已经提到了，这里贴命令行，更多点击这里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --watch</span><br></pre></td></tr></table></figure></p><p>这里是监控整个项目的文件，如果只想监听指定文件和目录，建议通过配置文件的watch、ignore_watch字段来设置。</p><h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><p>在实际项目开发中，我们的应用经常需要在多个环境下部署，比如开发环境、测试环境、生产环境等。在不同环境下，有时候配置项会有差异，比如链接的数据库地址不同等。</p><p>对于这种场景，pm2也是可以很好支持的。首先通过在配置文件中通过env_xx来声明不同环境的配置，然后在启动应用时，通过–</p><h3 id="环境配置声明"><a href="#环境配置声明" class="headerlink" title="环境配置声明"></a>环境配置声明</h3><p>首先，在配置文件中，通过env选项声明多个环境配置。简单说明下：<br>env为默认的环境配置（生产环境），env_dev、env_test则分别是开发、测试环境。可以看到，不同环境下的NODE_ENV、REMOTE_ADDR字段的值是不同的。<br>在应用中，可以通过process.env.REMOTE_ADDR等来读取配置中生命的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">  &quot;NODE_ENV&quot;: &quot;production&quot;,</span><br><span class="line">  &quot;REMOTE_ADDR&quot;: &quot;http://www.example.com/&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;env_dev&quot;: &#123;</span><br><span class="line">  &quot;NODE_ENV&quot;: &quot;development&quot;,</span><br><span class="line">  &quot;REMOTE_ADDR&quot;: &quot;http://wdev.example.com/&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;env_test&quot;: &#123;</span><br><span class="line">  &quot;NODE_ENV&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;REMOTE_ADDR&quot;: &quot;http://wtest.example.com/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动指明环境"><a href="#启动指明环境" class="headerlink" title="启动指明环境"></a>启动指明环境</h2><p>假设通过下面启动脚本（开发环境），那么，此时process.env.REMOTE_ADDR的值就是相应的 <a href="http://wdev.example.com/" target="_blank" rel="noopener">http://wdev.example.com/</a> ，可以自己试验下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --env dev</span><br></pre></td></tr></table></figure></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>命令如下，表示开启三个进程。如果-i 0，则会根据机器当前核数自动开启尽可能多的进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 3 # 开启三个进程</span><br><span class="line">pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程</span><br></pre></td></tr></table></figure><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><p>除了可以打开日志文件查看日志外，还可以通过pm2 logs来查看实时日志。这点对于线上问题排查非常重要。</p><p>比如某个node服务突然异常重启了，那么可以通过pm2提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure></p><h2 id="指令tab补全"><a href="#指令tab补全" class="headerlink" title="指令tab补全"></a>指令tab补全</h2><p>运行pm2 –help，可以看到pm2支持的子命令还是蛮多的，这个时候，自动完成的功能就很重要了。</p><p>运行如下命令。恭喜，已经能够通过tab自动补全了。细节可参考这里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 completion install</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></p><h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><p>可以通过pm2 startup来实现开机自启动。细节可参考。大致流程如下</p><p>通过pm2 save保存当前进程状态。<br>通过pm2 startup [platform]生成开机自启动的命令。（记得查看控制台输出）<br>将步骤2生成的命令，粘贴到控制台进行，搞定。</p><h2 id="传入node-args"><a href="#传入node-args" class="headerlink" title="传入node args"></a>传入node args</h2><p>直接上例子，分别是通过命令行和配置文件。<br>命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --node-args=&quot;--harmony&quot;</span><br><span class="line">配置文件：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;oc-server&quot;,</span><br><span class="line">  &quot;script&quot; : &quot;app.js&quot;,</span><br><span class="line">  &quot;node_args&quot; : &quot;--harmony&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><p>假设是在centos下，那么运行如下命令，搞定。强烈建议运行完成之后，重启机器，看是否设置成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ94wb7tioqZ option_analysis]# pm2 save</span><br><span class="line">[root@iZ94wb7tioqZ option_analysis]# pm2 startup centos</span><br><span class="line">[PM2] Generating system init script in /etc/init.d/pm2-init.sh</span><br><span class="line">[PM2] Making script booting at startup...</span><br><span class="line">[PM2] /var/lock/subsys/pm2-init.sh lockfile has been added</span><br><span class="line">[PM2] -centos- Using the command:</span><br><span class="line">      su -c &quot;chmod +x /etc/init.d/pm2-init.sh; chkconfig --add pm2-init.sh&quot;</span><br><span class="line">[PM2] Done.</span><br><span class="line">[root@iZ94wb7tioqZ option_analysis]# pm2 save</span><br><span class="line">[PM2] Dumping processes</span><br></pre></td></tr></table></figure></p><h2 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h2><p>可参考官方文档，配置也不复杂，用到的时候再来填写这里的坑。TODO</p><p>官方文档：<a href="http://pm2.keymetrics.io/docs/usage/deployment/#getting-started" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/deployment/#getting-started</a></p><h2 id="监控-monitor"><a href="#监控-monitor" class="headerlink" title="监控(monitor)"></a>监控(monitor)</h2><p>运行如下命令，查看当前通过pm2运行的进程的状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure></p><p>看到类似输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@oneday-dev0 server]# pm2 monit</span><br><span class="line">⌬ PM2 monitoring (To go further check out https://app.keymetrics.io) </span><br><span class="line">                                       [                              ] 0 %</span><br><span class="line">⌬ PM2 monitoring (To go further check o[|||||||||||||||               ] 196.285 MB  </span><br><span class="line"></span><br><span class="line"> ● fis-receiver                        [                              ] 0 %</span><br><span class="line">[1] [fork_mode]                        [|||||                         ] 65.773 MB  </span><br><span class="line"></span><br><span class="line"> ● www                                 [                              ] 0 %</span><br><span class="line">[2] [fork_mode]                        [|||||                         ] 74.426 MB  </span><br><span class="line"></span><br><span class="line"> ● oc-server                           [                              ] 0 %</span><br><span class="line">[3] [fork_mode]                        [||||                          ] 57.801 MB  </span><br><span class="line"></span><br><span class="line"> ● pm2-http-interface                  [                              ] stopped</span><br><span class="line">[4] [fork_mode]                        [                              ] 0 B   </span><br><span class="line"></span><br><span class="line"> ● start-production</span><br><span class="line">[5] [fork_mode]</span><br></pre></td></tr></table></figure></p><h2 id="内存使用超过上限自动重启"><a href="#内存使用超过上限自动重启" class="headerlink" title="内存使用超过上限自动重启"></a>内存使用超过上限自动重启</h2><p>如果想要你的应用，在超过使用内存上限后自动重启，那么可以加上–max-memory-restart参数。（有对应的配置项）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start big-array.js --max-memory-restart 20M</span><br></pre></td></tr></table></figure></p><h2 id="更新pm2"><a href="#更新pm2" class="headerlink" title="更新pm2"></a>更新pm2</h2><p>官方文档：<a href="http://pm2.keymetrics.io/docs/usage/update-pm2/#updating-pm2" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/usage/update-pm2/#updating-pm2</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 save # 记得保存进程状态</span><br><span class="line">$ npm install pm2 -g</span><br><span class="line">$ pm2 update</span><br></pre></td></tr></table></figure></p><h3 id="pm2-nginx"><a href="#pm2-nginx" class="headerlink" title="pm2 + nginx"></a>pm2 + nginx</h3><p>无非就是在nginx上做个反向代理配置，直接贴配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">upstream my_nodejs_upstream &#123;</span><br><span class="line">    server 127.0.0.1:3001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name my_nodejs_server;</span><br><span class="line">    root /home/www/project_root;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_max_temp_file_size 0;</span><br><span class="line">        proxy_pass http://my_nodejs_upstream/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_read_timeout 240s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方文档：<a href="http://pm2.keymetrics.io/docs/tutorials/pm2-nginx-production-setup" target="_blank" rel="noopener">http://pm2.keymetrics.io/docs/tutorials/pm2-nginx-production-setup</a> （目前不能访问）</p><h2 id="在线监控系统"><a href="#在线监控系统" class="headerlink" title="在线监控系统"></a>在线监控系统</h2><p>收费服务，使用超级简单，可以方便的对进程的服务情况进行监控。可以试用下，地址:<a href="https://app.keymetrics.io/（目前不能访问）。" target="_blank" rel="noopener">https://app.keymetrics.io/（目前不能访问）。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PM2实用入门指南&quot;&gt;&lt;a href=&quot;#PM2实用入门指南&quot; class=&quot;headerlink&quot; title=&quot;PM2实用入门指南&quot;&gt;&lt;/a&gt;PM2实用入门指南&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加评论功能</title>
    <link href="http://yoursite.com/2018/08/02/hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/08/02/hexo添加评论功能/</id>
    <published>2018-08-02T01:57:13.961Z</published>
    <updated>2018-08-02T01:57:48.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo添加评论功能"><a href="#hexo添加评论功能" class="headerlink" title="hexo添加评论功能"></a>hexo添加评论功能</h1><hr><blockquote><p>目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。<br>可用的评论系统常用的有以下几个：<br>HyperComments：<a href="https://www.hypercomments.com" target="_blank" rel="noopener">https://www.hypercomments.com</a> （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）<br>来必力：<a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a> （来自韩国，使用邮箱注册。）<br>畅言： <a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">http://changyan.kuaizhan.com</a> （安装需要备案号。不太好用。）<br>Gitment： <a href="https://github.com/imsun/gitment（有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）" target="_blank" rel="noopener">https://github.com/imsun/gitment（有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）</a><br>Valine: <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a>(基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）<br>综上，最终采用了来必力。</p></blockquote><h2 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h2><p>  打开来必力官网：<br>  <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br>  友情提示：注册是需要翻墙</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>点击上方的安装，选择免费的city版本。 </p><p><img src="http://omphuzvd1.bkt.clouddn.com/18-1-12/39894562.jpg" alt="cmd-markdown-logo"></p><p>并点击现在安装，出现如下界面。</p><p><img src="http://omphuzvd1.bkt.clouddn.com/18-1-12/43359846.jpg" alt="cmd-markdown-logo"></p><p>复制其中的uid字段。<br>打开主题目录下的 blog/themes/next/_config.yml 配置文件，定位到 livere_uid 字段，粘贴上刚刚复制的UID。<br>至此，大功告成。<br>效果展示<br>测试评论如图所示： </p><p><img src="http://omphuzvd1.bkt.clouddn.com/18-1-12/12725283.jpg" alt="cmd-markdown-logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo添加评论功能&quot;&gt;&lt;a href=&quot;#hexo添加评论功能&quot; class=&quot;headerlink&quot; title=&quot;hexo添加评论功能&quot;&gt;&lt;/a&gt;hexo添加评论功能&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;目前博客站点使用的评论功能，多说，网易云
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/31/hello-world/"/>
    <id>http://yoursite.com/2018/07/31/hello-world/</id>
    <published>2018-07-31T09:02:20.210Z</published>
    <updated>2018-08-02T05:48:03.304Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
